'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var translate$1 = _interopDefault(require('@vitalets/google-translate-api'));
var fs = require('fs/promises');
var loading = _interopDefault(require('loading-cli'));

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
  try {
    var info = gen[key](arg);
    var value = info.value;
  } catch (error) {
    reject(error);
    return;
  }

  if (info.done) {
    resolve(value);
  } else {
    Promise.resolve(value).then(_next, _throw);
  }
}

function _asyncToGenerator(fn) {
  return function () {
    var self = this,
        args = arguments;
    return new Promise(function (resolve, reject) {
      var gen = fn.apply(self, args);

      function _next(value) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
      }

      function _throw(err) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
      }

      _next(undefined);
    });
  };
}

function createCommonjsModule(fn, module) {
	return module = { exports: {} }, fn(module, module.exports), module.exports;
}

var runtime_1 = createCommonjsModule(function (module) {
/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var runtime = (function (exports) {

  var Op = Object.prototype;
  var hasOwn = Op.hasOwnProperty;
  var undefined$1; // More compressible than void 0.
  var $Symbol = typeof Symbol === "function" ? Symbol : {};
  var iteratorSymbol = $Symbol.iterator || "@@iterator";
  var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

  function define(obj, key, value) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
    return obj[key];
  }
  try {
    // IE 8 has a broken Object.defineProperty that only works on DOM objects.
    define({}, "");
  } catch (err) {
    define = function(obj, key, value) {
      return obj[key] = value;
    };
  }

  function wrap(innerFn, outerFn, self, tryLocsList) {
    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
    var generator = Object.create(protoGenerator.prototype);
    var context = new Context(tryLocsList || []);

    // The ._invoke method unifies the implementations of the .next,
    // .throw, and .return methods.
    generator._invoke = makeInvokeMethod(innerFn, self, context);

    return generator;
  }
  exports.wrap = wrap;

  // Try/catch helper to minimize deoptimizations. Returns a completion
  // record like context.tryEntries[i].completion. This interface could
  // have been (and was previously) designed to take a closure to be
  // invoked without arguments, but in all the cases we care about we
  // already have an existing method we want to call, so there's no need
  // to create a new function object. We can even get away with assuming
  // the method takes exactly one argument, since that happens to be true
  // in every case, so we don't have to touch the arguments object. The
  // only additional allocation required is the completion record, which
  // has a stable shape and so hopefully should be cheap to allocate.
  function tryCatch(fn, obj, arg) {
    try {
      return { type: "normal", arg: fn.call(obj, arg) };
    } catch (err) {
      return { type: "throw", arg: err };
    }
  }

  var GenStateSuspendedStart = "suspendedStart";
  var GenStateSuspendedYield = "suspendedYield";
  var GenStateExecuting = "executing";
  var GenStateCompleted = "completed";

  // Returning this object from the innerFn has the same effect as
  // breaking out of the dispatch switch statement.
  var ContinueSentinel = {};

  // Dummy constructor functions that we use as the .constructor and
  // .constructor.prototype properties for functions that return Generator
  // objects. For full spec compliance, you may wish to configure your
  // minifier not to mangle the names of these two functions.
  function Generator() {}
  function GeneratorFunction() {}
  function GeneratorFunctionPrototype() {}

  // This is a polyfill for %IteratorPrototype% for environments that
  // don't natively support it.
  var IteratorPrototype = {};
  define(IteratorPrototype, iteratorSymbol, function () {
    return this;
  });

  var getProto = Object.getPrototypeOf;
  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
  if (NativeIteratorPrototype &&
      NativeIteratorPrototype !== Op &&
      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
    // This environment has a native %IteratorPrototype%; use it instead
    // of the polyfill.
    IteratorPrototype = NativeIteratorPrototype;
  }

  var Gp = GeneratorFunctionPrototype.prototype =
    Generator.prototype = Object.create(IteratorPrototype);
  GeneratorFunction.prototype = GeneratorFunctionPrototype;
  define(Gp, "constructor", GeneratorFunctionPrototype);
  define(GeneratorFunctionPrototype, "constructor", GeneratorFunction);
  GeneratorFunction.displayName = define(
    GeneratorFunctionPrototype,
    toStringTagSymbol,
    "GeneratorFunction"
  );

  // Helper for defining the .next, .throw, and .return methods of the
  // Iterator interface in terms of a single ._invoke method.
  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function(method) {
      define(prototype, method, function(arg) {
        return this._invoke(method, arg);
      });
    });
  }

  exports.isGeneratorFunction = function(genFun) {
    var ctor = typeof genFun === "function" && genFun.constructor;
    return ctor
      ? ctor === GeneratorFunction ||
        // For the native GeneratorFunction constructor, the best we can
        // do is to check its .name property.
        (ctor.displayName || ctor.name) === "GeneratorFunction"
      : false;
  };

  exports.mark = function(genFun) {
    if (Object.setPrototypeOf) {
      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
    } else {
      genFun.__proto__ = GeneratorFunctionPrototype;
      define(genFun, toStringTagSymbol, "GeneratorFunction");
    }
    genFun.prototype = Object.create(Gp);
    return genFun;
  };

  // Within the body of any async function, `await x` is transformed to
  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
  // `hasOwn.call(value, "__await")` to determine if the yielded value is
  // meant to be awaited.
  exports.awrap = function(arg) {
    return { __await: arg };
  };

  function AsyncIterator(generator, PromiseImpl) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);
      if (record.type === "throw") {
        reject(record.arg);
      } else {
        var result = record.arg;
        var value = result.value;
        if (value &&
            typeof value === "object" &&
            hasOwn.call(value, "__await")) {
          return PromiseImpl.resolve(value.__await).then(function(value) {
            invoke("next", value, resolve, reject);
          }, function(err) {
            invoke("throw", err, resolve, reject);
          });
        }

        return PromiseImpl.resolve(value).then(function(unwrapped) {
          // When a yielded Promise is resolved, its final value becomes
          // the .value of the Promise<{value,done}> result for the
          // current iteration.
          result.value = unwrapped;
          resolve(result);
        }, function(error) {
          // If a rejected Promise was yielded, throw the rejection back
          // into the async generator function so it can be handled there.
          return invoke("throw", error, resolve, reject);
        });
      }
    }

    var previousPromise;

    function enqueue(method, arg) {
      function callInvokeWithMethodAndArg() {
        return new PromiseImpl(function(resolve, reject) {
          invoke(method, arg, resolve, reject);
        });
      }

      return previousPromise =
        // If enqueue has been called before, then we want to wait until
        // all previous Promises have been resolved before calling invoke,
        // so that results are always delivered in the correct order. If
        // enqueue has not been called before, then it is important to
        // call invoke immediately, without waiting on a callback to fire,
        // so that the async generator function has the opportunity to do
        // any necessary setup in a predictable way. This predictability
        // is why the Promise constructor synchronously invokes its
        // executor callback, and why async functions synchronously
        // execute code before the first await. Since we implement simple
        // async functions in terms of async generators, it is especially
        // important to get this right, even though it requires care.
        previousPromise ? previousPromise.then(
          callInvokeWithMethodAndArg,
          // Avoid propagating failures to Promises returned by later
          // invocations of the iterator.
          callInvokeWithMethodAndArg
        ) : callInvokeWithMethodAndArg();
    }

    // Define the unified helper method that is used to implement .next,
    // .throw, and .return (see defineIteratorMethods).
    this._invoke = enqueue;
  }

  defineIteratorMethods(AsyncIterator.prototype);
  define(AsyncIterator.prototype, asyncIteratorSymbol, function () {
    return this;
  });
  exports.AsyncIterator = AsyncIterator;

  // Note that simple async functions are implemented on top of
  // AsyncIterator objects; they just return a Promise for the value of
  // the final result produced by the iterator.
  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {
    if (PromiseImpl === void 0) PromiseImpl = Promise;

    var iter = new AsyncIterator(
      wrap(innerFn, outerFn, self, tryLocsList),
      PromiseImpl
    );

    return exports.isGeneratorFunction(outerFn)
      ? iter // If outerFn is a generator, return the full iterator.
      : iter.next().then(function(result) {
          return result.done ? result.value : iter.next();
        });
  };

  function makeInvokeMethod(innerFn, self, context) {
    var state = GenStateSuspendedStart;

    return function invoke(method, arg) {
      if (state === GenStateExecuting) {
        throw new Error("Generator is already running");
      }

      if (state === GenStateCompleted) {
        if (method === "throw") {
          throw arg;
        }

        // Be forgiving, per 25.3.3.3.3 of the spec:
        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
        return doneResult();
      }

      context.method = method;
      context.arg = arg;

      while (true) {
        var delegate = context.delegate;
        if (delegate) {
          var delegateResult = maybeInvokeDelegate(delegate, context);
          if (delegateResult) {
            if (delegateResult === ContinueSentinel) continue;
            return delegateResult;
          }
        }

        if (context.method === "next") {
          // Setting context._sent for legacy support of Babel's
          // function.sent implementation.
          context.sent = context._sent = context.arg;

        } else if (context.method === "throw") {
          if (state === GenStateSuspendedStart) {
            state = GenStateCompleted;
            throw context.arg;
          }

          context.dispatchException(context.arg);

        } else if (context.method === "return") {
          context.abrupt("return", context.arg);
        }

        state = GenStateExecuting;

        var record = tryCatch(innerFn, self, context);
        if (record.type === "normal") {
          // If an exception is thrown from innerFn, we leave state ===
          // GenStateExecuting and loop back for another invocation.
          state = context.done
            ? GenStateCompleted
            : GenStateSuspendedYield;

          if (record.arg === ContinueSentinel) {
            continue;
          }

          return {
            value: record.arg,
            done: context.done
          };

        } else if (record.type === "throw") {
          state = GenStateCompleted;
          // Dispatch the exception by looping back around to the
          // context.dispatchException(context.arg) call above.
          context.method = "throw";
          context.arg = record.arg;
        }
      }
    };
  }

  // Call delegate.iterator[context.method](context.arg) and handle the
  // result, either by returning a { value, done } result from the
  // delegate iterator, or by modifying context.method and context.arg,
  // setting context.delegate to null, and returning the ContinueSentinel.
  function maybeInvokeDelegate(delegate, context) {
    var method = delegate.iterator[context.method];
    if (method === undefined$1) {
      // A .throw or .return when the delegate iterator has no .throw
      // method always terminates the yield* loop.
      context.delegate = null;

      if (context.method === "throw") {
        // Note: ["return"] must be used for ES3 parsing compatibility.
        if (delegate.iterator["return"]) {
          // If the delegate iterator has a return method, give it a
          // chance to clean up.
          context.method = "return";
          context.arg = undefined$1;
          maybeInvokeDelegate(delegate, context);

          if (context.method === "throw") {
            // If maybeInvokeDelegate(context) changed context.method from
            // "return" to "throw", let that override the TypeError below.
            return ContinueSentinel;
          }
        }

        context.method = "throw";
        context.arg = new TypeError(
          "The iterator does not provide a 'throw' method");
      }

      return ContinueSentinel;
    }

    var record = tryCatch(method, delegate.iterator, context.arg);

    if (record.type === "throw") {
      context.method = "throw";
      context.arg = record.arg;
      context.delegate = null;
      return ContinueSentinel;
    }

    var info = record.arg;

    if (! info) {
      context.method = "throw";
      context.arg = new TypeError("iterator result is not an object");
      context.delegate = null;
      return ContinueSentinel;
    }

    if (info.done) {
      // Assign the result of the finished delegate to the temporary
      // variable specified by delegate.resultName (see delegateYield).
      context[delegate.resultName] = info.value;

      // Resume execution at the desired location (see delegateYield).
      context.next = delegate.nextLoc;

      // If context.method was "throw" but the delegate handled the
      // exception, let the outer generator proceed normally. If
      // context.method was "next", forget context.arg since it has been
      // "consumed" by the delegate iterator. If context.method was
      // "return", allow the original .return call to continue in the
      // outer generator.
      if (context.method !== "return") {
        context.method = "next";
        context.arg = undefined$1;
      }

    } else {
      // Re-yield the result returned by the delegate method.
      return info;
    }

    // The delegate iterator is finished, so forget it and continue with
    // the outer generator.
    context.delegate = null;
    return ContinueSentinel;
  }

  // Define Generator.prototype.{next,throw,return} in terms of the
  // unified ._invoke helper method.
  defineIteratorMethods(Gp);

  define(Gp, toStringTagSymbol, "Generator");

  // A Generator should always return itself as the iterator object when the
  // @@iterator function is called on it. Some browsers' implementations of the
  // iterator prototype chain incorrectly implement this, causing the Generator
  // object to not be returned from this call. This ensures that doesn't happen.
  // See https://github.com/facebook/regenerator/issues/274 for more details.
  define(Gp, iteratorSymbol, function() {
    return this;
  });

  define(Gp, "toString", function() {
    return "[object Generator]";
  });

  function pushTryEntry(locs) {
    var entry = { tryLoc: locs[0] };

    if (1 in locs) {
      entry.catchLoc = locs[1];
    }

    if (2 in locs) {
      entry.finallyLoc = locs[2];
      entry.afterLoc = locs[3];
    }

    this.tryEntries.push(entry);
  }

  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal";
    delete record.arg;
    entry.completion = record;
  }

  function Context(tryLocsList) {
    // The root entry object (effectively a try statement without a catch
    // or a finally block) gives us a place to store values thrown from
    // locations where there is no enclosing try statement.
    this.tryEntries = [{ tryLoc: "root" }];
    tryLocsList.forEach(pushTryEntry, this);
    this.reset(true);
  }

  exports.keys = function(object) {
    var keys = [];
    for (var key in object) {
      keys.push(key);
    }
    keys.reverse();

    // Rather than returning an object with a next method, we keep
    // things simple and return the next function itself.
    return function next() {
      while (keys.length) {
        var key = keys.pop();
        if (key in object) {
          next.value = key;
          next.done = false;
          return next;
        }
      }

      // To avoid creating an additional object, we just hang the .value
      // and .done properties off the next function object itself. This
      // also ensures that the minifier will not anonymize the function.
      next.done = true;
      return next;
    };
  };

  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];
      if (iteratorMethod) {
        return iteratorMethod.call(iterable);
      }

      if (typeof iterable.next === "function") {
        return iterable;
      }

      if (!isNaN(iterable.length)) {
        var i = -1, next = function next() {
          while (++i < iterable.length) {
            if (hasOwn.call(iterable, i)) {
              next.value = iterable[i];
              next.done = false;
              return next;
            }
          }

          next.value = undefined$1;
          next.done = true;

          return next;
        };

        return next.next = next;
      }
    }

    // Return an iterator with no values.
    return { next: doneResult };
  }
  exports.values = values;

  function doneResult() {
    return { value: undefined$1, done: true };
  }

  Context.prototype = {
    constructor: Context,

    reset: function(skipTempReset) {
      this.prev = 0;
      this.next = 0;
      // Resetting context._sent for legacy support of Babel's
      // function.sent implementation.
      this.sent = this._sent = undefined$1;
      this.done = false;
      this.delegate = null;

      this.method = "next";
      this.arg = undefined$1;

      this.tryEntries.forEach(resetTryEntry);

      if (!skipTempReset) {
        for (var name in this) {
          // Not sure about the optimal order of these conditions:
          if (name.charAt(0) === "t" &&
              hasOwn.call(this, name) &&
              !isNaN(+name.slice(1))) {
            this[name] = undefined$1;
          }
        }
      }
    },

    stop: function() {
      this.done = true;

      var rootEntry = this.tryEntries[0];
      var rootRecord = rootEntry.completion;
      if (rootRecord.type === "throw") {
        throw rootRecord.arg;
      }

      return this.rval;
    },

    dispatchException: function(exception) {
      if (this.done) {
        throw exception;
      }

      var context = this;
      function handle(loc, caught) {
        record.type = "throw";
        record.arg = exception;
        context.next = loc;

        if (caught) {
          // If the dispatched exception was caught by a catch block,
          // then let that catch block handle the exception normally.
          context.method = "next";
          context.arg = undefined$1;
        }

        return !! caught;
      }

      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        var record = entry.completion;

        if (entry.tryLoc === "root") {
          // Exception thrown outside of any try block that could handle
          // it, so set the completion value of the entire function to
          // throw the exception.
          return handle("end");
        }

        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc");
          var hasFinally = hasOwn.call(entry, "finallyLoc");

          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            } else if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            }

          } else if (hasFinally) {
            if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else {
            throw new Error("try statement without catch or finally");
          }
        }
      }
    },

    abrupt: function(type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc <= this.prev &&
            hasOwn.call(entry, "finallyLoc") &&
            this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }

      if (finallyEntry &&
          (type === "break" ||
           type === "continue") &&
          finallyEntry.tryLoc <= arg &&
          arg <= finallyEntry.finallyLoc) {
        // Ignore the finally entry if control is not jumping to a
        // location outside the try/catch block.
        finallyEntry = null;
      }

      var record = finallyEntry ? finallyEntry.completion : {};
      record.type = type;
      record.arg = arg;

      if (finallyEntry) {
        this.method = "next";
        this.next = finallyEntry.finallyLoc;
        return ContinueSentinel;
      }

      return this.complete(record);
    },

    complete: function(record, afterLoc) {
      if (record.type === "throw") {
        throw record.arg;
      }

      if (record.type === "break" ||
          record.type === "continue") {
        this.next = record.arg;
      } else if (record.type === "return") {
        this.rval = this.arg = record.arg;
        this.method = "return";
        this.next = "end";
      } else if (record.type === "normal" && afterLoc) {
        this.next = afterLoc;
      }

      return ContinueSentinel;
    },

    finish: function(finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.finallyLoc === finallyLoc) {
          this.complete(entry.completion, entry.afterLoc);
          resetTryEntry(entry);
          return ContinueSentinel;
        }
      }
    },

    "catch": function(tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;
          if (record.type === "throw") {
            var thrown = record.arg;
            resetTryEntry(entry);
          }
          return thrown;
        }
      }

      // The context.catch method must only be called with a location
      // argument that corresponds to a known catch block.
      throw new Error("illegal catch attempt");
    },

    delegateYield: function(iterable, resultName, nextLoc) {
      this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      };

      if (this.method === "next") {
        // Deliberately forget the last sent value so that we don't
        // accidentally pass it on to the delegate.
        this.arg = undefined$1;
      }

      return ContinueSentinel;
    }
  };

  // Regardless of whether this script is executing as a CommonJS module
  // or not, return the runtime object so that we can declare the variable
  // regeneratorRuntime in the outer scope, which allows this module to be
  // injected easily by `bin/regenerator --include-runtime script.js`.
  return exports;

}(
  // If this script is executing as a CommonJS module, use module.exports
  // as the regeneratorRuntime namespace. Otherwise create a new empty
  // object. Either way, the resulting object will be used to initialize
  // the regeneratorRuntime variable at the top of this file.
   module.exports 
));

try {
  regeneratorRuntime = runtime;
} catch (accidentalStrictMode) {
  // This module should not be running in strict mode, so the above
  // assignment should always work unless something is misconfigured. Just
  // in case runtime.js accidentally runs in strict mode, in modern engines
  // we can explicitly access globalThis. In older engines we can escape
  // strict mode using a global Function call. This could conceivably fail
  // if a Content Security Policy forbids using Function, but in that case
  // the proper solution is to fix the accidental strict mode problem. If
  // you've misconfigured your bundler to force strict mode and applied a
  // CSP to forbid Function, and you're not willing to fix either of those
  // problems, please detail your unique predicament in a GitHub issue.
  if (typeof globalThis === "object") {
    globalThis.regeneratorRuntime = runtime;
  } else {
    Function("r", "regeneratorRuntime = r")(runtime);
  }
}
});

var version = "0.8.0";

function getLanguageFromCode(language_code) {
  return getEnumKeyByEnumValue(languages, language_code);
}
function getCodeFromLanguage(language) {
  return languages[language];
}

function getEnumKeyByEnumValue(myEnum, enumValue) {
  var keys = Object.keys(myEnum).filter(function (x) {
    return myEnum[x] == enumValue;
  });
  return keys.length > 0 ? keys[0] : '';
}

function translationStatistic(totalTranslated, totalTranslation) {
  return totalTranslated + " of " + totalTranslation + " translated.";
}
var current_version = version;
var default_value = '-';
var translation_value_limit = 5000;

var cli_name = 'jsontt';
var success_color = '\x1b[32m';
var error_color = '\x1b[31m';
var info_color = '\x1b[34m';
var warn_color = '\x1b[33m';
function success(message) {
  console.log(success_color, "" + message, '\x1b[0m');
}
function error(message) {
  console.log(error_color, "" + message, '\x1b[0m');
}
function info(message) {
  console.log(info_color, "" + message, '\x1b[0m');
}
function warn(message) {
  console.log(warn_color, "" + message, '\x1b[0m');
}
var commands = {
  help1: '--help',
  help2: '-h'
};
var messages = {
  cli: {
    welcome: "Welcome to the JSON translator. v" + current_version,
    usage: "Usage: \n\n\t" + cli_name + " \"C:/json/file/path\" \n\t" + cli_name + " " + commands.help1 + " \n\t" + cli_name + " " + commands.help2,
    from_message: 'From which language?',
    to_message: 'To which language | languages? (Can select more than one with space bar)',
    no_selected_language: 'You didn`t select any language. Please try it again and select languages with the space bar.',
    creation_done: 'All files are created! You can find them in the same folder as the original JSON file.'
  },
  object: {},
  file: {
    no_path: "The path is not provided.",
    no_file_in_path: "Could not find the file in the path.",
    cannot_translate: "Could not translate the file.",
    cannot_save_file: "Could not save the file."
  },
  general: {}
};

function plaintranslate(_x, _x2, _x3) {
  return _plaintranslate.apply(this, arguments);
}

function _plaintranslate() {
  _plaintranslate = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(word, from, to) {
    var _yield$translate, text;

    return runtime_1.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return translate$1(safeValueTransition(word), {
              from: from,
              to: to
            });

          case 2:
            _yield$translate = _context.sent;
            text = _yield$translate.text;
            global.totalTranslated = global.totalTranslated + 1;
            return _context.abrupt("return", text);

          case 6:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _plaintranslate.apply(this, arguments);
}

function getFile(_x4) {
  return _getFile.apply(this, arguments);
}

function _getFile() {
  _getFile = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2(objectPath) {
    var json_file;
    return runtime_1.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            json_file = undefined;
            _context2.next = 3;
            return fs.readFile(objectPath, 'utf8').then(function (data) {
              json_file = data;
            })["catch"](function (_) {
              json_file = undefined;
            });

          case 3:
            return _context2.abrupt("return", json_file);

          case 4:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));
  return _getFile.apply(this, arguments);
}

function getRootFolder(path) {
  var arr = path.split('/');
  arr.pop();
  var root = arr.join('/');

  if (root == undefined || root == '') {
    root = './';
  }

  return root;
}
function saveFilePublic(_x5, _x6) {
  return _saveFilePublic.apply(this, arguments);
}

function _saveFilePublic() {
  _saveFilePublic = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee3(path, data) {
    var json;
    return runtime_1.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            json = JSON.stringify(data);
            _context3.next = 3;
            return fs.writeFile(path, json, 'utf8').then(function (_) {})["catch"](function (_) {
              error(messages.file.cannot_save_file);
            });

          case 3:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3);
  }));
  return _saveFilePublic.apply(this, arguments);
}

function safeValueTransition(value) {
  var value_safety = valueIsSafe(value);

  if (value_safety.is_safe == true) {
    return value;
  }

  switch (value_safety.type) {
    case nonSafeTypes["null"]:
    case nonSafeTypes.undefined:
    case nonSafeTypes.empty:
      value = default_value;
      break;

    case nonSafeTypes["long"]:
      value = value.substring(0, translation_value_limit);
      break;
  }

  return value;
}

function valueIsSafe(value) {
  var result = {
    is_safe: true,
    type: undefined
  };

  if (value == undefined) {
    result.is_safe = false;
    result['type'] = nonSafeTypes.undefined;
    return result;
  }

  if (value == null) {
    result.is_safe = false;
    result['type'] = nonSafeTypes["null"];
    return result;
  }

  if (value.length >= translation_value_limit) {
    result.is_safe = false;
    result['type'] = nonSafeTypes["long"];
    return result;
  }

  if (value == '') {
    result.is_safe = false;
    result['type'] = nonSafeTypes.empty;
    return result;
  }

  return result;
}

var nonSafeTypes;

(function (nonSafeTypes) {
  nonSafeTypes[nonSafeTypes["long"] = 0] = "long";
  nonSafeTypes[nonSafeTypes["undefined"] = 1] = "undefined";
  nonSafeTypes[nonSafeTypes["null"] = 2] = "null";
  nonSafeTypes[nonSafeTypes["empty"] = 3] = "empty";
})(nonSafeTypes || (nonSafeTypes = {}));

function objectTranslator(_x, _x2, _x3) {
  return _objectTranslator.apply(this, arguments);
}

function _objectTranslator() {
  _objectTranslator = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2(object, from, to) {
    var general_object;
    return runtime_1.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            if (!(object && from && to)) {
              _context2.next = 13;
              break;
            }

            if (!(typeof to == 'object')) {
              _context2.next = 8;
              break;
            }

            general_object = [];
            _context2.next = 5;
            return Promise.all(Object.keys(to).map( /*#__PURE__*/function () {
              var _ref = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(index) {
                var index_as_num, copy_object;
                return runtime_1.wrap(function _callee$(_context) {
                  while (1) {
                    switch (_context.prev = _context.next) {
                      case 0:
                        index_as_num = Number(index);
                        copy_object = JSON.parse(JSON.stringify(object));
                        _context.next = 4;
                        return deepDiver(copy_object, from, to[index_as_num]);

                      case 4:
                        general_object[index_as_num] = _context.sent;

                      case 5:
                      case "end":
                        return _context.stop();
                    }
                  }
                }, _callee);
              }));

              return function (_x7) {
                return _ref.apply(this, arguments);
              };
            }()));

          case 5:
            return _context2.abrupt("return", general_object);

          case 8:
            _context2.next = 10;
            return deepDiver(object, from, to);

          case 10:
            return _context2.abrupt("return", object);

          case 11:
            _context2.next = 14;
            break;

          case 13:
            throw new Error("Undefined values detected. Available ones: object: " + !!object + ", from: " + !!from + ", to: " + !!to);

          case 14:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));
  return _objectTranslator.apply(this, arguments);
}

function deepDiver(_x4, _x5, _x6) {
  return _deepDiver.apply(this, arguments);
}

function _deepDiver() {
  _deepDiver = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee4(object, from, to) {
    var has;
    return runtime_1.wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            has = Object.prototype.hasOwnProperty.bind(object);
            _context4.next = 3;
            return Promise.all(Object.keys(object).map( /*#__PURE__*/function () {
              var _ref2 = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee3(k) {
                return runtime_1.wrap(function _callee3$(_context3) {
                  while (1) {
                    switch (_context3.prev = _context3.next) {
                      case 0:
                        if (!has(k)) {
                          _context3.next = 11;
                          break;
                        }

                        _context3.t0 = typeof object[k];
                        _context3.next = _context3.t0 === 'object' ? 4 : _context3.t0 === 'string' ? 7 : 11;
                        break;

                      case 4:
                        _context3.next = 6;
                        return deepDiver(object[k], from, to);

                      case 6:
                        return _context3.abrupt("break", 11);

                      case 7:
                        global.totalTranslation = global.totalTranslation + 1;
                        _context3.next = 10;
                        return plaintranslate(object[k], from, to);

                      case 10:
                        object[k] = _context3.sent;

                      case 11:
                      case "end":
                        return _context3.stop();
                    }
                  }
                }, _callee3);
              }));

              return function (_x8) {
                return _ref2.apply(this, arguments);
              };
            }()));

          case 3:
            return _context4.abrupt("return", object);

          case 4:
          case "end":
            return _context4.stop();
        }
      }
    }, _callee4);
  }));
  return _deepDiver.apply(this, arguments);
}

function fileTranslator(_x, _x2, _x3) {
  return _fileTranslator.apply(this, arguments);
}

function _fileTranslator() {
  _fileTranslator = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2(objectPath, from, to) {
    var file_from_path, json_obj, new_json_obj, latest_path, root_folder, file_name;
    return runtime_1.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _context2.next = 2;
            return getFileFromPath(objectPath);

          case 2:
            file_from_path = _context2.sent;
            json_obj = file_from_path.json_obj;
            objectPath = file_from_path.objectPath;

            if (!(json_obj == undefined)) {
              _context2.next = 8;
              break;
            }

            error(messages.file.no_file_in_path);
            return _context2.abrupt("return");

          case 8:
            json_obj = {
              data: JSON.parse(json_obj)
            };
            _context2.next = 11;
            return objectTranslator(json_obj, from, to);

          case 11:
            new_json_obj = _context2.sent;

            if (!(new_json_obj == undefined)) {
              _context2.next = 15;
              break;
            }

            error(messages.file.cannot_translate);
            return _context2.abrupt("return");

          case 15:
            latest_path = objectPath.replace(/\\/g, '/');
            root_folder = getRootFolder(latest_path);

            if (!(Array.isArray(new_json_obj) == true && Array.isArray(to) == true)) {
              _context2.next = 21;
              break;
            }

            // multiple file saving
            new_json_obj.forEach( /*#__PURE__*/function () {
              var _ref = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(element, index) {
                var current_json_obj, file_name;
                return runtime_1.wrap(function _callee$(_context) {
                  while (1) {
                    switch (_context.prev = _context.next) {
                      case 0:
                        current_json_obj = element.data;
                        file_name = "/" + to[index] + ".json";
                        _context.next = 4;
                        return saveFilePublic(root_folder + file_name, current_json_obj);

                      case 4:
                        success("For " + getLanguageFromCode(to[index]) + " --> " + to[index] + ".json created.");

                      case 5:
                      case "end":
                        return _context.stop();
                    }
                  }
                }, _callee);
              }));

              return function (_x5, _x6) {
                return _ref.apply(this, arguments);
              };
            }());
            _context2.next = 26;
            break;

          case 21:
            new_json_obj = new_json_obj.data;
            file_name = "/" + to + ".json";
            _context2.next = 25;
            return saveFilePublic(root_folder + file_name, new_json_obj);

          case 25:
            success("For " + getLanguageFromCode(to) + " --> " + to + ".json created.");

          case 26:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));
  return _fileTranslator.apply(this, arguments);
}

function getFileFromPath(_x4) {
  return _getFileFromPath.apply(this, arguments);
}

function _getFileFromPath() {
  _getFileFromPath = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee3(objectPath) {
    var json_obj;
    return runtime_1.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            _context3.next = 2;
            return getFile(objectPath);

          case 2:
            json_obj = _context3.sent;

            if (!(json_obj == undefined)) {
              _context3.next = 8;
              break;
            }

            objectPath = __dirname + '\\' + objectPath;
            _context3.next = 7;
            return getFile(objectPath);

          case 7:
            json_obj = _context3.sent;

          case 8:
            return _context3.abrupt("return", {
              json_obj: json_obj,
              objectPath: objectPath
            });

          case 9:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3);
  }));
  return _getFileFromPath.apply(this, arguments);
}

var languages;

(function (languages) {
  languages["Automatic"] = "auto";
  languages["Afrikaans"] = "af";
  languages["Albanian"] = "sq";
  languages["Amharic"] = "am";
  languages["Arabic"] = "ar";
  languages["Armenian"] = "hy";
  languages["Azerbaijani"] = "az";
  languages["Basque"] = "eu";
  languages["Belarusian"] = "be";
  languages["Bengali"] = "bn";
  languages["Bosnian"] = "bs";
  languages["Bulgarian"] = "bg";
  languages["Catalan"] = "ca";
  languages["Cebuano"] = "ceb";
  languages["Chichewa"] = "ny";
  languages["Chinese_Simplified"] = "zh-CN";
  languages["Chinese_Traditional"] = "zh-TW";
  languages["Corsican"] = "co";
  languages["Croatian"] = "hr";
  languages["Czech"] = "cs";
  languages["Danish"] = "da";
  languages["Dutch"] = "nl";
  languages["English"] = "en";
  languages["Esperanto"] = "eo";
  languages["Estonian"] = "et";
  languages["Filipino"] = "tl";
  languages["Finnish"] = "fi";
  languages["French"] = "fr";
  languages["Frisian"] = "fy";
  languages["Galician"] = "gl";
  languages["Georgian"] = "ka";
  languages["German"] = "de";
  languages["Greek"] = "el";
  languages["Gujarati"] = "gu";
  languages["Haitian_Creole"] = "ht";
  languages["Hausa"] = "ha";
  languages["Hawaiian"] = "haw";
  languages["Hebrew"] = "iw";
  languages["Hindi"] = "hi";
  languages["Hmong"] = "hmn";
  languages["Hungarian"] = "hu";
  languages["Icelandic"] = "is";
  languages["Igbo"] = "ig";
  languages["Indonesian"] = "id";
  languages["Irish"] = "ga";
  languages["Italian"] = "it";
  languages["Japanese"] = "ja";
  languages["Javanese"] = "jw";
  languages["Kannada"] = "kn";
  languages["Kazakh"] = "kk";
  languages["Khmer"] = "km";
  languages["Korean"] = "ko";
  languages["Kurdish_Kurmanji"] = "ku";
  languages["Kyrgyz"] = "ky";
  languages["Lao"] = "lo";
  languages["Latin"] = "la";
  languages["Latvian"] = "lv";
  languages["Lithuanian"] = "lt";
  languages["Luxembourgish"] = "lb";
  languages["Macedonian"] = "mk";
  languages["Malagasy"] = "mg";
  languages["Malay"] = "ms";
  languages["Malayalam"] = "ml";
  languages["Maltese"] = "mt";
  languages["Maori"] = "mi";
  languages["Marathi"] = "mr";
  languages["Mongolian"] = "mn";
  languages["Myanmar_Burmese"] = "my";
  languages["Nepali"] = "ne";
  languages["Norwegian"] = "no";
  languages["Pashto"] = "ps";
  languages["Persian"] = "fa";
  languages["Polish"] = "pl";
  languages["Portuguese"] = "pt";
  languages["Punjabi"] = "pa";
  languages["Romanian"] = "ro";
  languages["Russian"] = "ru";
  languages["Samoan"] = "sm";
  languages["Scots_Gaelic"] = "gd";
  languages["Serbian"] = "sr";
  languages["Sesotho"] = "st";
  languages["Shona"] = "sn";
  languages["Sindhi"] = "sd";
  languages["Sinhala"] = "si";
  languages["Slovak"] = "sk";
  languages["Slovenian"] = "sl";
  languages["Somali"] = "so";
  languages["Spanish"] = "es";
  languages["Sundanese"] = "su";
  languages["Swahili"] = "sw";
  languages["Swedish"] = "sv";
  languages["Tajik"] = "tg";
  languages["Tamil"] = "ta";
  languages["Telugu"] = "te";
  languages["Thai"] = "th";
  languages["Turkish"] = "tr";
  languages["Ukrainian"] = "uk";
  languages["Urdu"] = "ur";
  languages["Uzbek"] = "uz";
  languages["Vietnamese"] = "vi";
  languages["Welsh"] = "cy";
  languages["Xhosa"] = "xh";
  languages["Yiddish"] = "yi";
  languages["Yoruba"] = "yo";
  languages["Zulu"] = "zu";
})(languages || (languages = {}));

var inquirer = /*#__PURE__*/require('inquirer');

function initializeCli() {
  return _initializeCli.apply(this, arguments);
}

function _initializeCli() {
  _initializeCli = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee() {
    var myArgs;
    return runtime_1.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            global.totalTranslation = 0;
            global.totalTranslated = 0;
            myArgs = process.argv.slice(2);

            if (!(myArgs.length == 0 || myArgs[0] == commands.help1 || myArgs[0] == commands.help2)) {
              _context.next = 6;
              break;
            }

            help();
            return _context.abrupt("return");

          case 6:
            translate();

          case 7:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _initializeCli.apply(this, arguments);
}

function help() {
  return _help.apply(this, arguments);
}

function _help() {
  _help = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2() {
    return runtime_1.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            success(messages.cli.welcome);
            info(messages.cli.usage);

          case 2:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));
  return _help.apply(this, arguments);
}

function translate() {
  return _translate.apply(this, arguments);
}

function _translate() {
  _translate = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee3() {
    var myArgs, objectPath, _yield$getFileFromPat, json_obj, from, to, from_choices, to_choices, to_languages, load, refreshInterval;

    return runtime_1.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            myArgs = process.argv.slice(2); // no path condition

            objectPath = myArgs[0];

            if (!(objectPath == undefined || objectPath == '')) {
              _context3.next = 5;
              break;
            }

            error(messages.file.no_path + ' ' + messages.cli.usage);
            return _context3.abrupt("return");

          case 5:
            _context3.next = 7;
            return getFileFromPath(objectPath);

          case 7:
            _yield$getFileFromPat = _context3.sent;
            json_obj = _yield$getFileFromPat.json_obj;

            if (!(json_obj == undefined)) {
              _context3.next = 12;
              break;
            }

            error(messages.file.no_file_in_path);
            return _context3.abrupt("return");

          case 12:
            from_choices = Object.entries(languages).map(function (_ref) {
              var key = _ref[0];
              return key;
            });
            to_choices = from_choices.filter(function (language) {
              return language != "Automatic";
            });
            _context3.next = 16;
            return inquirer.prompt([{
              type: 'list',
              name: 'from',
              message: messages.cli.from_message,
              pageSize: 20,
              choices: [].concat(from_choices, [new inquirer.Separator()])
            }, {
              type: 'checkbox',
              name: 'to',
              pageSize: 20,
              message: messages.cli.to_message,
              choices: to_choices
            }]).then(function (answers) {
              from = answers.from;
              to = answers.to;
            });

          case 16:
            if (!(to.length == 0 || to == undefined)) {
              _context3.next = 19;
              break;
            }

            warn(messages.cli.no_selected_language);
            return _context3.abrupt("return");

          case 19:
            to_languages = to.map(function (language) {
              return languages[language];
            });
            load = loading({
              text: "Translating. Please wait. " + translationStatistic(global.totalTranslated, global.totalTranslation),
              color: 'yellow',
              interval: 100,
              stream: process.stdout,
              frames: ['.', 'o', 'O', '°', 'O', 'o', '.']
            }).start();
            refreshInterval = setInterval(function () {
              load.text = "Translating. Please wait. " + translationStatistic(global.totalTranslated, global.totalTranslation);
            }, 200);
            _context3.next = 24;
            return fileTranslator(objectPath, getCodeFromLanguage(from), to_languages);

          case 24:
            load.succeed("DONE! " + translationStatistic(global.totalTranslation, global.totalTranslation));
            clearInterval(refreshInterval);
            info(messages.cli.creation_done);

          case 27:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3);
  }));
  return _translate.apply(this, arguments);
}

function translateWord(_x, _x2, _x3) {
  return _translateWord.apply(this, arguments);
}

function _translateWord() {
  _translateWord = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(word, from, to) {
    return runtime_1.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return plaintranslate(word, from, to);

          case 2:
            return _context.abrupt("return", _context.sent);

          case 3:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _translateWord.apply(this, arguments);
}

function translateObject(_x4, _x5, _x6) {
  return _translateObject.apply(this, arguments);
}

function _translateObject() {
  _translateObject = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2(object, from, to) {
    var hard_copy;
    return runtime_1.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            hard_copy = JSON.parse(JSON.stringify(object));
            return _context2.abrupt("return", objectTranslator(hard_copy, from, to));

          case 2:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));
  return _translateObject.apply(this, arguments);
}

function translateFile(_x7, _x8, _x9) {
  return _translateFile.apply(this, arguments);
}

function _translateFile() {
  _translateFile = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee3(objectPath, from, to) {
    return runtime_1.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            return _context3.abrupt("return", fileTranslator(objectPath, from, to));

          case 1:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3);
  }));
  return _translateFile.apply(this, arguments);
}

function runCli() {
  return _runCli.apply(this, arguments);
}

function _runCli() {
  _runCli = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee4() {
    return runtime_1.wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            initializeCli();

          case 1:
          case "end":
            return _context4.stop();
        }
      }
    }, _callee4);
  }));
  return _runCli.apply(this, arguments);
}

(function (languages) {
  languages["Automatic"] = "auto";
  languages["Afrikaans"] = "af";
  languages["Albanian"] = "sq";
  languages["Amharic"] = "am";
  languages["Arabic"] = "ar";
  languages["Armenian"] = "hy";
  languages["Azerbaijani"] = "az";
  languages["Basque"] = "eu";
  languages["Belarusian"] = "be";
  languages["Bengali"] = "bn";
  languages["Bosnian"] = "bs";
  languages["Bulgarian"] = "bg";
  languages["Catalan"] = "ca";
  languages["Cebuano"] = "ceb";
  languages["Chichewa"] = "ny";
  languages["Chinese_Simplified"] = "zh-CN";
  languages["Chinese_Traditional"] = "zh-TW";
  languages["Corsican"] = "co";
  languages["Croatian"] = "hr";
  languages["Czech"] = "cs";
  languages["Danish"] = "da";
  languages["Dutch"] = "nl";
  languages["English"] = "en";
  languages["Esperanto"] = "eo";
  languages["Estonian"] = "et";
  languages["Filipino"] = "tl";
  languages["Finnish"] = "fi";
  languages["French"] = "fr";
  languages["Frisian"] = "fy";
  languages["Galician"] = "gl";
  languages["Georgian"] = "ka";
  languages["German"] = "de";
  languages["Greek"] = "el";
  languages["Gujarati"] = "gu";
  languages["Haitian_Creole"] = "ht";
  languages["Hausa"] = "ha";
  languages["Hawaiian"] = "haw";
  languages["Hebrew"] = "iw";
  languages["Hindi"] = "hi";
  languages["Hmong"] = "hmn";
  languages["Hungarian"] = "hu";
  languages["Icelandic"] = "is";
  languages["Igbo"] = "ig";
  languages["Indonesian"] = "id";
  languages["Irish"] = "ga";
  languages["Italian"] = "it";
  languages["Japanese"] = "ja";
  languages["Javanese"] = "jw";
  languages["Kannada"] = "kn";
  languages["Kazakh"] = "kk";
  languages["Khmer"] = "km";
  languages["Korean"] = "ko";
  languages["Kurdish_Kurmanji"] = "ku";
  languages["Kyrgyz"] = "ky";
  languages["Lao"] = "lo";
  languages["Latin"] = "la";
  languages["Latvian"] = "lv";
  languages["Lithuanian"] = "lt";
  languages["Luxembourgish"] = "lb";
  languages["Macedonian"] = "mk";
  languages["Malagasy"] = "mg";
  languages["Malay"] = "ms";
  languages["Malayalam"] = "ml";
  languages["Maltese"] = "mt";
  languages["Maori"] = "mi";
  languages["Marathi"] = "mr";
  languages["Mongolian"] = "mn";
  languages["Myanmar_Burmese"] = "my";
  languages["Nepali"] = "ne";
  languages["Norwegian"] = "no";
  languages["Pashto"] = "ps";
  languages["Persian"] = "fa";
  languages["Polish"] = "pl";
  languages["Portuguese"] = "pt";
  languages["Punjabi"] = "pa";
  languages["Romanian"] = "ro";
  languages["Russian"] = "ru";
  languages["Samoan"] = "sm";
  languages["Scots_Gaelic"] = "gd";
  languages["Serbian"] = "sr";
  languages["Sesotho"] = "st";
  languages["Shona"] = "sn";
  languages["Sindhi"] = "sd";
  languages["Sinhala"] = "si";
  languages["Slovak"] = "sk";
  languages["Slovenian"] = "sl";
  languages["Somali"] = "so";
  languages["Spanish"] = "es";
  languages["Sundanese"] = "su";
  languages["Swahili"] = "sw";
  languages["Swedish"] = "sv";
  languages["Tajik"] = "tg";
  languages["Tamil"] = "ta";
  languages["Telugu"] = "te";
  languages["Thai"] = "th";
  languages["Turkish"] = "tr";
  languages["Ukrainian"] = "uk";
  languages["Urdu"] = "ur";
  languages["Uzbek"] = "uz";
  languages["Vietnamese"] = "vi";
  languages["Welsh"] = "cy";
  languages["Xhosa"] = "xh";
  languages["Yiddish"] = "yi";
  languages["Yoruba"] = "yo";
  languages["Zulu"] = "zu";
})(exports.languages || (exports.languages = {}));

exports.runCli = runCli;
exports.translateFile = translateFile;
exports.translateObject = translateObject;
exports.translateWord = translateWord;
//# sourceMappingURL=json-translator.cjs.development.js.map
